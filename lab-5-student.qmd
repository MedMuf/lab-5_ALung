---
title: "Lab 5: Murder in SQL City"
author: "Alex Lung"
date: "10/27/2024"
format: 
  html:  
    embed-resources: true
    code-tools: true
    toc: true
    number-sections: true
    theme: cerulean
editor: source
execute: 
  echo: true
  error: true
  message: false
  warning: false
code-fold: true
---

For this lab, you will be joining and filtering related datasets to solve a murder mystery!

## Instructions

Northwestern University's Knight Lab wanted to help sharpen users' database skills, so they created a murder mystery. Can you solve this crime in SQL City??

The relational data you will be working with contains tables with different pieces of information pertinent to the crime - people, social media check-ins, driver's licenses, crime scene reports, police interviews, and more!

![Database schema](https://mystery.knightlab.com/schema.png)

Solve the murder mystery, showing **all of your work in this document**. Your document and code must be well organized, easy to follow, and reproducible.

-   Use headers and written descriptions to indicate what you are doing.
-   Use `dplyr` verbs and `join` functions rather than just looking through the tables manually.
-   Use good code formatting practices.
-   Comment your code.
-   Cite any external sources you use to solve the mystery.

### Tips

You may find the `pull()` function handy for displaying each clue as you go along.

## Access the Data

This code chunk will read in all of the tables of data for you. Don't modify or remove this!

```{r}
#| message: false
#| warning: false
#| label: read-in-data

library(tidyverse)

# If purrr is not detected, install the package
if (!"purrr" %in% installed.packages()) install.packages("purrr")

source("https://raw.githubusercontent.com/atheobold/groupworthy-data-science/main/labs/instructions/lab-5-setup.R")
```

## Solve the Crime

### Crime Scene Report

Detective Wickham reaches out to you...

> A crime has taken place and I need your help! There was a murder in SQL City sometime on January 15, 2018. Could you retrieve the crime scene report from the police departmentâ€™s database and follow the clues to find the person responsible for the murder?!

#### Description of the Crime

```{r}
#| label: inspecting-crime-scene-report

crime_scene_report |>
  
  mutate(date = ymd(date)) |>
  
  filter(date == mdy("January 15, 2018"), 
           city == "SQL City",
           type == "murder") |>
  
  select(description) 
 

```
*Reflection: When I initially looked at this problem, I took advantage of the fact that the date was a string and so I was able to work my way around using the lubridate functions. Really, I was depriving myself of the ability to apply the lubridate functions, preventing myself to learn. Luckily I was able to make the lubridate functions to work within my code and get the desired results that I wanted. I need to use this to show that I am capable of using new functions even if the datasets allow me to be comfortable and use functions I already use very often. This is followed by the alteration from using "&" to commas, which cleaned up the code even more. I just want this to teach me that there are cleaner alternative to cluttering the code up with more characters, when a "," will be more than enough to get the result I want.*

#### Witness Interviews

```{r}
#| label: inspecting-witnesses


#Two witnesses from footage.
#One lives at the last house on "Northwestern Dr".
#The other, Annabel, lives somewhere on "Franklin Ave".

#https://chatgpt.com/share/671c51b6-4170-8000-8487-5c4d9ce9f2ef
#https://stackoverflow.com/questions/6286313/remove-an-entire-column-from-a-data-frame-in-r

person |> 
  
  right_join(interview,
          by = join_by(
            id == person_id)
          ) |>
  
  filter(address_street_name == "Northwestern Dr" &
           address_number == max(address_number) | 
           (word(name) == "Annabel" &
            address_street_name == "Franklin Ave")
         ) |>

  
  select(transcript)

#Witnesses are Annabel Miller, ID: 16371 and Morty Schapiro, ID: 14887

#Shapiro saw a man run out with a "Get Fit Now" gym bag, number started with "48Z".
#These bags are only given to gold members and got in a car with a plate that included "H42W".

#Miller saw the murder happen and recognized the killer, who worked out last week on January 9th. 
```
*Reflection: I initially had this split up, which worked but did only provide more confusion regarding how the code worked, preventing it from being streamlined. I was able to connect the two functions into one pipeline, increasing processing speed. I altered the filter function to include both of the searches for the interviews, using the max() function for the address number. I also took the input in using the word() function as it led me to not requiring a split within the values of the name column and simplifying the code. My progression throughout this revision just encouraged me to keep looking for functions that complete multiple steps in one and keeping the code together when possible. Having code split with made the code more readable but, would also cause more outputs to be put out, causing the render document to be cluttered, with that solution being the use of an object, but this case did not require one.*

#### Suspect Determination

```{r}
#| label: initial-suspect
 
suspect <- drivers_license |> 

#Rename id in drivers id to prevent confusion.
  rename(drivers_id = id) |>

 #Join person's data to get name of people
  full_join(person,
             by = join_by(
               drivers_id == license_id
             )
            ) |>
    
  #Search for plates that have this pattern
  filter(str_detect(plate_number, "H42W")) |>
  
  
  filter(id %in% get_fit_now_member$person_id) 
  
suspect$name



#Murderer is Jeremy Bowers as described by the witnesses
```
*Reflection: For this aspect fo determining the suspect, I found it best that we have to include a variable to set our suspect in. We have been told to try our best to not create unnecessary object, but I just took it as not using them at all. In this case, the suspect variable would be ideal for later use so that hard-coding would not be needed. I like the idea of objects in that they can be used to split up the code, but I need to not make a habit of overflowing the environment with objects that are not useful in later aspects of the code.*

#### Suspect Confession

```{r}
#| label: suspect-interview

interview |>
  filter(person_id == suspect$id) |>
  select(transcript) 

#Suspect was hired by a women with a lot of money.
#She is around 5'55" (65") or 5'7" (67"), red hair, drives a Tesla Model S.
#She attended the SQL Symphony Concert 3 times in December 2017

```

#### Determine Associate

```{r}
#Determine if anyone fits the description given by Bowers

#Starting with the facebook event dataset to find the id's of those that went 3 times to
#the SQL Symphony Concert. 

facebook_event_checkin |>
  
  #Change the date column to real "dates"
  mutate(date = ymd(date)) |>
  
  filter(event_name == "SQL Symphony Concert",
         month(date) == 12) |>
  
  group_by(person_id) |>
  
  summarise(num_of_concert_visits = n()) |>
  
  filter(num_of_concert_visits == "3") |>
  
  left_join(person,
            by = join_by(
              person_id == id)
            ) |>
  
  right_join(drivers_license,
         by = join_by(
           license_id == id)
         ) |>
  
  filter(hair_color == "red",
         car_model == "Model S",
         height >= "65" |
           height <= "67"
         ) |>
  
  inner_join(income,
             join_by(ssn)) |>
  
  left_join(interview,
             join_by(person_id)) |>

  select(name,
         annual_income,
         transcript)



#Miranda Priestly matches the description and activity given by Bowers 

#She has an income that would prove the purchase of a hitman possible.

#We found that she has not been interviewed and so she is the suspected employer of Priestly. 


```

\`\`\`

**Follow the evidence to the person responsible for the murder, building a report as you go.** Hint: Make sure you check for interviews with any suspects!

## And the final suspect is...

*Put the name of the person responsible for the murder here:*

**Murderer is Jeremy Bowers and his employer was possibly Miranda Priestly**
